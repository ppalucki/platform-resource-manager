pipeline {
    triggers {
        cron('H/30 * * * *')
    }
    agent { label 'kubernetes' }
    environment {
        PLAYBOOK='prm/workload-collocation-agent/workloads/run_workloads.yaml'
        INVENTORY='prm/demo_scenarios/common/inventory-kubernetes.yaml'
        LLC_INVENTORY='prm/demo_scenarios/complex_llc.0/inventory.yaml'
        MEMBW_INVENTORY='prm/demo_scenarios/complex_mbw.0/inventory.yaml'
        PROMETHEUS='http://100.64.176.12:9090'
        KUBERNETES_HOST='100.64.176.34'
        LLC_BASELINE_SLEEP = 300
        LLC_COLLECT_SLEEP = 36000
        LLC_CONTENDER_SLEEP = 300
        MBW_BASELINE_SLEEP = 5
        MBW_CONTENDER_SLEEP = 5
        BUILD_COMMIT = "${GIT_COMMIT}"
        CRT_PATH = "/etc/kubernetes/ssl"
	EXTRA_ANSIBLE_PARAMS = ""
    }
    options {
        disableConcurrentBuilds()
        timeout(time: 25, unit: 'MINUTES')
    }
    parameters {
        booleanParam(name: 'BUILD_PEX', defaultValue: true, description: 'Build wca-pex')
        booleanParam(name: 'LLC', defaultValue: true, description: 'Run LLC experiment')
        booleanParam(name: 'BUILD_LLC_MODEL', defaultValue: false, description: 'Build Model For LLC Contention')
        booleanParam(name: 'MB', defaultValue: true, description: 'Run MBW experiment')
    }
    stages {
        stage('Build pex') {
            when { expression { return params.BUILD_PEX } }
            stages {
                stage("Prepare venv && build pex") {
                    steps {
                        dir('prm') {
                            sh('make venv')
                            sh('make check')
                            sh('make package')
                        }
                    }
                }
            }
        }
        stage("Run LLC experiment") {
            when { expression { return params.LLC } }
            environment {
                KUBERNETES_EXPECTED_TASKS = -1
                MIN_RECALL = -1
                MIN_PRECISION = -1
                BUILD_SCENARIO = "llc"
                LABELS="{additional_labels: {build_number: \"${BUILD_NUMBER}\", build_node_name: \"${NODE_NAME}\", build_commit: \"${GIT_COMMIT}\", build_scenario: \"$BUILD_SCENARIO\"}}"
            }
            steps {
                echo 'Reconfigure wca...'
		        sh 'cp ${WORKSPACE}/prm/demo_scenarios/common/wca_config_kubernetes.yml ${WORKSPACE}/prm/demo_scenarios/common/wca_config.yml.tmp'
		        sh 'sudo cp ${WORKSPACE}/prm/demo_scenarios/common/wca.service /etc/systemd/system/wca.service'
		        sh 'sudo systemctl daemon-reload'
                contentReplace(
                    configs: [
                        fileContentReplaceConfig(
                            configs: [
                                fileContentReplaceItemConfig( search: 'BUILD_COMMIT', replace: "${GIT_COMMIT}", matchCount: 0),
                                fileContentReplaceItemConfig( search: 'BUILD_NUMBER', replace: "${BUILD_NUMBER}", matchCount: 0),
                                fileContentReplaceItemConfig( search: 'BUILD_SCENARIO', replace: "${BUILD_SCENARIO}", matchCount: 0),
                                fileContentReplaceItemConfig( search: 'CRT_PATH', replace: "${CRT_PATH}", matchCount: 0)
                            ],
                            fileEncoding: 'UTF-8', 
                            filePath: "${WORKSPACE}/prm/demo_scenarios/common/wca_config.yml.tmp")
                        ])
                sh'''
                sudo cp ${WORKSPACE}/prm/demo_scenarios/common/threshold.json /var/lib/wca/
                sudo cp ${WORKSPACE}/prm/demo_scenarios/common/workload.json /var/lib/wca/
                sudo cp ${WORKSPACE}/prm/demo_scenarios/common/wca_config.yml.tmp /etc/wca/wca_config.yml
                sudo cp ${WORKSPACE}/prm/dist/wca-prm.pex /usr/bin/wca.pex
                sudo systemctl restart wca
                '''
                echo 'Restart wca...'
                sleep 5
                sh 'sudo systemctl status wca'

                dir('prm/workload-collocation-agent/workloads'){
                    echo 'Start baseline workloads.'
                    sh 'ansible-playbook ${EXTRA_ANSIBLE_PARAMS} -i ${WORKSPACE}/${LLC_INVENTORY} -i ${WORKSPACE}/${INVENTORY} --tags=twemcache_mutilate,redis_rpc_perf,cassandra_stress--cassandra -e "${LABELS}" ${WORKSPACE}/${PLAYBOOK}'
                    sleep LLC_BASELINE_SLEEP
                    echo 'Start contender workload.'
                    sh 'ansible-playbook  ${EXTRA_ANSIBLE_PARAMS}  -i ${WORKSPACE}/${LLC_INVENTORY} -i ${WORKSPACE}/${INVENTORY} --tags=cassandra_stress--stress -e "${LABELS}" ${WORKSPACE}/${PLAYBOOK}'
                    sleep LLC_CONTENDER_SLEEP
                }
                dir('prm'){
                    echo 'Calculate precision and recall...'
                    sh "PYTHONPATH=. pipenv run pytest tests/e2e/test_calculate_accuracy.py --junitxml=unit_results.xml --junit-prefix=${BUILD_SCENARIO} --log-level=debug --log-cli-level=debug -v"
                }
            }
            post {
                always {
                    echo 'Stop all workloads...'
                    sh 'ansible-playbook  ${EXTRA_ANSIBLE_PARAMS}  -i ${WORKSPACE}/${INVENTORY} --tags=clean_jobs ${WORKSPACE}/${PLAYBOOK}'
                    sleep 5
                    echo 'Plot LLC results...'
                    plot(
                        csvFileName: 'llc_results.csv',
                        style: 'line',
                        csvSeries: [
                            [
                                displayTableFlag: false,
                                exclusionValues: '',
                                inclusionFlag: 'OFF',
                                file: 'prm/test_results.csv',
                                url: ''
                            ]
                        ],
                       group: 'PRM performance v4',
                       title: 'LLC complex scenario',
                       numBuilds: '5',
                    )
                    echo 'Storing LLC results.'
                    junit 'prm/unit_results.xml'
                    echo 'Stop wca...'
                    sh 'sudo systemctl stop wca'
                }
            }
        }
        stage("Run Memory Bandwidth experiment") {
            when {
                expression { return params.MB }
            }
            environment {
                KUBERNETES_EXPECTED_TASKS = -1
                MIN_RECALL = -1
                MIN_PRECISION = -1
                BUILD_SCENARIO = "mbw"
                LABELS="{additional_labels: {build_number: \"${BUILD_NUMBER}\", build_node_name: \"${NODE_NAME}\", build_commit: \"${GIT_COMMIT}\", build_scenario: \"$BUILD_SCENARIO\"}}"
            }


            steps {

                echo 'Reconfigure wca...'
		        sh 'cp ${WORKSPACE}/prm/demo_scenarios/common/wca_config_kubernetes.yml ${WORKSPACE}/prm/demo_scenarios/common/wca_config.yml.tmp'
		        sh 'sudo cp ${WORKSPACE}/prm/demo_scenarios/common/wca.service /etc/systemd/system/wca.service'
		        sh 'sudo systemctl daemon-reload'
                contentReplace(
                    configs: [
                        fileContentReplaceConfig(
                            configs: [
                                fileContentReplaceItemConfig( search: 'BUILD_COMMIT', replace: "${GIT_COMMIT}", matchCount: 0),
                                fileContentReplaceItemConfig( search: 'BUILD_NUMBER', replace: "${BUILD_NUMBER}", matchCount: 0),
                                fileContentReplaceItemConfig( search: 'BUILD_SCENARIO', replace: "${BUILD_SCENARIO}", matchCount: 0),
                                fileContentReplaceItemConfig( search: 'CRT_PATH', replace: "${CRT_PATH}", matchCount: 0)
                            ],
                            fileEncoding: 'UTF-8', 
                            filePath: "${WORKSPACE}/prm/demo_scenarios/common/wca_config.yml.tmp")
                        ])
                sh'''
                sudo cp ${WORKSPACE}/prm/demo_scenarios/common/threshold.json /var/lib/wca/
                sudo cp ${WORKSPACE}/prm/demo_scenarios/common/workload.json /var/lib/wca/
                sudo cp ${WORKSPACE}/prm/demo_scenarios/common/wca_config.yml.tmp /etc/wca/wca_config.yml
                sudo cp ${WORKSPACE}/prm/dist/wca-prm.pex /usr/bin/wca.pex
                sudo systemctl restart wca
                '''
                sleep 5
                echo 'Restart wca...'
                sh 'sudo systemctl status wca'

                dir('prm/workload-collocation-agent/workloads'){
                    echo 'Start baseline workloads.'
                    sh 'ansible-playbook  ${EXTRA_ANSIBLE_PARAMS}  -i ${WORKSPACE}/${MEMBW_INVENTORY} -i ${WORKSPACE}/${INVENTORY} --tags=specjbb,tensorflow_benchmark_train,cassandra_stress -e "${LABELS}" ${WORKSPACE}/${PLAYBOOK}'
                    sleep MBW_BASELINE_SLEEP
                    echo 'Start contender workload.'
                    sh 'ansible-playbook  ${EXTRA_ANSIBLE_PARAMS}  -i ${WORKSPACE}/${MEMBW_INVENTORY} -i ${WORKSPACE}/${INVENTORY} --tags=tensorflow_benchmark_prediction -e "${LABELS}" ${WORKSPACE}/${PLAYBOOK}'
                    sleep MBW_CONTENDER_SLEEP
                }
                dir('prm'){
                    echo 'Calculate precision and recall...'
                    sh "PYTHONPATH=. pipenv run pytest tests/e2e/test_calculate_accuracy.py --junitxml=unit_results.xml --junit-prefix=${BUILD_SCENARIO} --log-level=debug --log-cli-level=debug -v"
                }
            }
            post {
                always {
                    echo 'Stop all workloads...'
                    sh 'ansible-playbook  ${EXTRA_ANSIBLE_PARAMS}  -i ${WORKSPACE}/${INVENTORY} --tags=clean_jobs ${WORKSPACE}/${PLAYBOOK}'
                    sleep 5
                    echo 'Plot LLC results...'
                    plot(
                        csvFileName: 'mbw_results.csv',
                        style: 'line',
                        csvSeries: [
                            [
                                displayTableFlag: false,
                                exclusionValues: '',
                                inclusionFlag: 'OFF',
                                file: 'prm/test_results.csv',
                                url: ''
                            ]
                        ],
                       group: 'PRM performance v4',
                       title: 'MBW complex scenario',
                       numBuilds: '5',
                    )
                    echo 'Storing MBW results.'
                    junit 'prm/unit_results.xml'
                    echo 'Stop wca...'
                    sh 'sudo systemctl stop wca'
                }
            }
        }
    }
}
